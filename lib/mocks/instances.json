{
  "instances": [
    {
      "endpoints": {
        "sse": "https://glama.ai/mcp/instances/t27so815yb/sse?token=187b0bbc-091d-49e2-9730-8515ae9b48ae"
      },
      "id": "t27so815yb",
      "mcpServer": {
        "attributes": ["author:official", "hosting:remote-capable"],
        "description": "This server enables AI systems to integrate with Tavily's search and data extraction tools, providing real-time web information access and domain-specific searches.",
        "environmentVariablesJsonSchema": {
          "properties": {
            "TAVILY_API_KEY": {
              "description": "Your Tavily API key obtained from app.tavily.com/home",
              "type": "string"
            }
          },
          "type": "object",
          "required": ["TAVILY_API_KEY"]
        },
        "id": "jog9una8ox",
        "name": "Tavily MCP Server",
        "namespace": "tavily-ai",
        "repository": {
          "url": "https://github.com/tavily-ai/tavily-mcp"
        },
        "slug": "tavily-mcp",
        "spdxLicense": {
          "name": "MIT License",
          "url": "https://spdx.org/licenses/MIT.json"
        },
        "tools": [
          {
            "description": "A powerful web content extraction tool that retrieves and processes raw content from specified URLs, ideal for data collection, content analysis, and research tasks.",
            "name": "tavily-extract",
            "inputSchema": {
              "properties": {
                "extract_depth": {
                  "default": "basic",
                  "description": "Depth of extraction - 'basic' or 'advanced', if usrls are linkedin use 'advanced' or if explicitly told to use advanced",
                  "enum": ["basic", "advanced"],
                  "type": "string"
                },
                "include_images": {
                  "default": false,
                  "description": "Include a list of images extracted from the urls in the response",
                  "type": "boolean"
                },
                "urls": {
                  "description": "List of URLs to extract content from",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": ["urls"],
              "type": "object"
            }
          },
          {
            "description": "A powerful web search tool that provides comprehensive, real-time results using Tavily's AI search engine. Returns relevant web content with customizable parameters for result count, content type, and domain filtering. Ideal for gathering current information, news, and detailed web content analysis.",
            "name": "tavily-search",
            "inputSchema": {
              "properties": {
                "days": {
                  "default": 3,
                  "description": "The number of days back from the current date to include in the search results. This specifies the time frame of data to be retrieved. Please note that this feature is only available when using the 'news' search topic",
                  "type": "number"
                },
                "exclude_domains": {
                  "default": [],
                  "description": "List of domains to specifically exclude, if the user asks to exclude a domain set this to the domain of the site",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "include_domains": {
                  "default": [],
                  "description": "A list of domains to specifically include in the search results, if the user asks to search on specific sites set this to the domain of the site",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "include_image_descriptions": {
                  "default": false,
                  "description": "Include a list of query-related images and their descriptions in the response",
                  "type": "boolean"
                },
                "include_images": {
                  "default": false,
                  "description": "Include a list of query-related images in the response",
                  "type": "boolean"
                },
                "include_raw_content": {
                  "default": false,
                  "description": "Include the cleaned and parsed HTML content of each search result",
                  "type": "boolean"
                },
                "max_results": {
                  "default": 10,
                  "description": "The maximum number of search results to return",
                  "maximum": 20,
                  "minimum": 5,
                  "type": "number"
                },
                "query": {
                  "description": "Search query",
                  "type": "string"
                },
                "search_depth": {
                  "default": "basic",
                  "description": "The depth of the search. It can be 'basic' or 'advanced'",
                  "enum": ["basic", "advanced"],
                  "type": "string"
                },
                "time_range": {
                  "description": "The time range back from the current date to include in the search results. This feature is available for both 'general' and 'news' search topics",
                  "enum": ["day", "week", "month", "year", "d", "w", "m", "y"],
                  "type": "string"
                },
                "topic": {
                  "default": "general",
                  "description": "The category of the search. This will determine which of our agents will be used for the search",
                  "enum": ["general", "news"],
                  "type": "string"
                }
              },
              "required": ["query"],
              "type": "object"
            }
          }
        ],
        "url": "https://glama.ai/mcp/servers/jog9una8ox"
      }
    },
    {
      "endpoints": {
        "sse": "https://glama.ai/mcp/instances/y13e9s9zvd/sse?token=9ee438e7-e67c-4b51-88a1-7687b25ce16d"
      },
      "id": "s0o5zud2rp",
      "mcpServer": {
        "attributes": [],
        "description": "A Model Context Protocol (MCP) server for advanced code analysis and editing with semantic search capabilities, enabling AI assistants to perform complex code operations through a standardized interface.",
        "environmentVariablesJsonSchema": {
          "properties": {},
          "type": "object",
          "required": []
        },
        "id": "ceug9mr0e0",
        "name": "Moatless MCP Server",
        "namespace": "TwT23333",
        "repository": {
          "url": "https://github.com/TwT23333/mcp"
        },
        "slug": "mcp",
        "spdxLicense": null,
        "tools": [
          {
            "description": "Read file contents with optional line range. Supports text files up to 10MB.",
            "name": "read_file",
            "inputSchema": {
              "properties": {
                "end_line": {
                  "description": "End line number (1-based, optional)",
                  "minimum": 1,
                  "type": "integer"
                },
                "file_path": {
                  "description": "Path to the file to read (relative to workspace root)",
                  "type": "string"
                },
                "start_line": {
                  "description": "Start line number (1-based, optional)",
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": ["file_path"],
              "type": "object"
            }
          },
          {
            "description": "Write content to a file. Creates parent directories if needed.",
            "name": "write_file",
            "inputSchema": {
              "properties": {
                "content": {
                  "description": "Content to write to the file",
                  "type": "string"
                },
                "file_path": {
                  "description": "Path to the file to write (relative to workspace root)",
                  "type": "string"
                }
              },
              "required": ["file_path", "content"],
              "type": "object"
            }
          },
          {
            "description": "List files and directories in the workspace with filtering options.",
            "name": "list_files",
            "inputSchema": {
              "properties": {
                "directory": {
                  "default": "",
                  "description": "Directory path to list (relative to workspace root, default: root)",
                  "type": "string"
                },
                "max_results": {
                  "default": 100,
                  "description": "Maximum number of files to return",
                  "maximum": 1000,
                  "minimum": 1,
                  "type": "integer"
                },
                "recursive": {
                  "default": false,
                  "description": "Whether to list files recursively",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          {
            "description": "Replace occurrences of a string in a file with validation.",
            "name": "string_replace",
            "inputSchema": {
              "properties": {
                "file_path": {
                  "description": "Path to the file to modify",
                  "type": "string"
                },
                "new_str": {
                  "description": "String to replace with",
                  "type": "string"
                },
                "occurrence": {
                  "default": 1,
                  "description": "Which occurrence to replace (1-based, 0 for all occurrences)",
                  "minimum": 0,
                  "type": "integer"
                },
                "old_str": {
                  "description": "String to find and replace",
                  "type": "string"
                }
              },
              "required": ["file_path", "old_str", "new_str"],
              "type": "object"
            }
          },
          {
            "description": "Search for text patterns in files using regular expressions.",
            "name": "grep",
            "inputSchema": {
              "properties": {
                "file_pattern": {
                  "default": "*",
                  "description": "File glob pattern to limit search (default: *)",
                  "type": "string"
                },
                "max_results": {
                  "default": 100,
                  "description": "Maximum number of results to return",
                  "maximum": 1000,
                  "minimum": 1,
                  "type": "integer"
                },
                "pattern": {
                  "description": "Regular expression pattern to search for",
                  "type": "string"
                }
              },
              "required": ["pattern"],
              "type": "object"
            }
          },
          {
            "description": "Find files by name pattern using glob syntax.",
            "name": "find_files",
            "inputSchema": {
              "properties": {
                "max_results": {
                  "default": 100,
                  "description": "Maximum number of results to return",
                  "maximum": 1000,
                  "minimum": 1,
                  "type": "integer"
                },
                "pattern": {
                  "description": "Glob pattern to match file names (e.g., '*.py', '*test*', 'src/**/*.java')",
                  "type": "string"
                }
              },
              "required": ["pattern"],
              "type": "object"
            }
          },
          {
            "description": "Get information about the current workspace (path, git status, etc.)",
            "name": "workspace_info",
            "inputSchema": {
              "properties": {},
              "type": "object"
            }
          },
          {
            "description": "Find class definitions by name",
            "name": "find_class",
            "inputSchema": {
              "properties": {
                "class_name": {
                  "description": "Name of the class to find",
                  "type": "string"
                },
                "file_pattern": {
                  "description": "Optional file pattern to limit search",
                  "type": "string"
                }
              },
              "required": ["class_name"],
              "type": "object"
            }
          },
          {
            "description": "Find function definitions by name",
            "name": "find_function",
            "inputSchema": {
              "properties": {
                "file_pattern": {
                  "description": "Optional file pattern to limit search",
                  "type": "string"
                },
                "function_name": {
                  "description": "Name of the function to find",
                  "type": "string"
                }
              },
              "required": ["function_name"],
              "type": "object"
            }
          },
          {
            "description": "View specific code sections with context",
            "name": "view_code",
            "inputSchema": {
              "properties": {
                "end_line": {
                  "description": "Ending line number (1-indexed)",
                  "type": "integer"
                },
                "file_path": {
                  "description": "Path to the file to view",
                  "type": "string"
                },
                "span_ids": {
                  "description": "List of span IDs to view (class names, function names, etc.)",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "start_line": {
                  "description": "Starting line number (1-indexed)",
                  "type": "integer"
                }
              },
              "required": ["file_path"],
              "type": "object"
            }
          },
          {
            "description": "Search for code using natural language descriptions with vector embeddings",
            "name": "semantic_search",
            "inputSchema": {
              "properties": {
                "api_key": {
                  "description": "Jina AI API key for embeddings (can also be set via JINA_API_KEY env var)",
                  "type": "string"
                },
                "filter_type": {
                  "description": "Filter results by code chunk type",
                  "enum": [
                    "class",
                    "function",
                    "method",
                    "class_header",
                    "context"
                  ],
                  "type": "string"
                },
                "max_results": {
                  "default": 10,
                  "description": "Maximum number of results to return (default: 10)",
                  "type": "integer"
                },
                "query": {
                  "description": "Natural language description of what to find",
                  "type": "string"
                }
              },
              "required": ["query"],
              "type": "object"
            }
          },
          {
            "description": "Run tests using detected testing frameworks (pytest, jest, maven, etc.)",
            "name": "run_tests",
            "inputSchema": {
              "properties": {
                "args": {
                  "description": "Additional arguments to pass to the test runner",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "detect_only": {
                  "default": false,
                  "description": "Only detect available frameworks without running tests",
                  "type": "boolean"
                },
                "framework": {
                  "description": "Testing framework to use (auto-detected if not specified)",
                  "type": "string"
                },
                "test_path": {
                  "description": "Specific test file or directory to run",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          {
            "description": "Build a vector index for semantic code search using tree-sitter and Jina embeddings",
            "name": "build_vector_index",
            "inputSchema": {
              "properties": {
                "api_key": {
                  "description": "Jina AI API key for embeddings (can also be set via JINA_API_KEY env var)",
                  "type": "string"
                },
                "file_patterns": {
                  "description": "Optional list of glob patterns to filter files (e.g., ['**/*.py', '**/*.js'])",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "force_rebuild": {
                  "default": false,
                  "description": "Force rebuild even if index already exists",
                  "type": "boolean"
                },
                "model": {
                  "default": "jina-embeddings-v3",
                  "description": "Jina embedding model to use",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          {
            "description": "Check the status of the vector index for semantic search",
            "name": "vector_index_status",
            "inputSchema": {
              "properties": {},
              "type": "object"
            }
          },
          {
            "description": "Clear the vector index and delete all index files",
            "name": "clear_vector_index",
            "inputSchema": {
              "properties": {
                "confirm": {
                  "default": false,
                  "description": "Confirm that you want to delete the vector index",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "url": "https://glama.ai/mcp/servers/ceug9mr0e0"
      }
    }
  ]
}
